-if (page == 'home')

                    -else if(page == 'member')
                        div.categoryTitle 成员信息
                    -else if(page == 'announcement')
                        div.categoryTitle 通知



/*pool.getConnection(function(err,connection){
            if(!err){
               connection.query("select * from users where username = ?",username,function(err,rows){
                   if(!err){
                       res.send(rows);
                       res.end();
                   }else{
                       console.log(err);
                   }
                   connection.release();
               });
               // connection.destroy();
            }else{
                console.log(err);
            }
        })*/


  //promise进行异步调用处理，保证能够先获取值，再进行页面渲染
 /* function getData(userid){
    //返回一个promise对象，在内部方法执行成功时，.then方法调用里面的 onFulFilled方法，并且将执行成功后获得的值传递给 onFulFilled
    return new Promise(function(resolve,reject){
      //执行我们的获取值得函数，假如成功，那么将值传递给.then里面的方法
      database.findAssociation(userid,function(rows){
        if(rows){
          resolve(rows);
        }else{
          reject()
        }
      });
    });
  }
  getData(user.id).then(function onFulfilled(rows){
    console.log(rows);
    res.render('index', {
      title: '大学生社团活动平台',
      user:user,
      ass:rows
    });
  });*/




  function getData(userid){
      //返回一个promise对象，在内部方法执行成功时，.then方法调用里面的 onFulFilled方法，并且将执行成功后获得的值传递给 onFulFilled
      return new Promise(function(resolve,reject){
        //执行我们的获取值得函数，假如成功，那么将值传递给.then里面的方法
        database.findAssociation(userid,function(rows){
          if(rows){
            resolve(rows);
          }else{
            reject()
          }
        });
      });
    }
    getData(user.id).then(function task2(value){
      res.locals.ass = value;
      return new Promise(function(resolve,reject){
        //执行我们的获取值得函数，假如成功，那么将值传递给.then里面的方法
        database.findNews(function(rows){
          if(rows){
            resolve(rows);
          }else{
            reject()
          }
        });
      });
    }).then(function task3(value){
      console.log("value:",value);
      res.locals.news = value;
      res.render("index",{
        title: '大学生社团活动平台',
        user:user
      })
    })




     //用户名查重方法
        checkRepeat : function(res,username){
            //查询的sql语句
            var sql = "select * from users where username = ?";
            db.query(sql,username,function(rows){
                res.send(rows);
                res.end();
            });
        },
       //注册方法
        register : function(res,user){
            //插入的sql语句
            var sql = "insert into users(username,password,question,answer) values (?,?,?,?)";
            db.query(sql,[user.username,user.password,user.question,user.answer],function(rows){
                if(rows.affectedRows == 1){
                    //成功注册之后跳转至登录页面
                    res.redirect("toLogin");
                }
            })
        },
        //登录方法
        login : function(req,res,loginInfo){
            var sql = "select * from users where username = ? and password = ?";
            db.query(sql,[loginInfo.username,loginInfo.password],function(rows){
                if(rows.length != 0){
                    //查询到结果，将查询结果存入session
                        req.session.user = rows[0];
                        res.redirect("/index?user_id="+req.session.user.id+"");
                    }
                }
            )
        },
        findAssociation : function(userId,callback){
            var sql = "select name from association_info where id in (select a_id from association_user_info where u_id = ?)";
            db.query(sql,userId,function(rows){
                if(rows.length != 0){
                    callback(rows);
                }
            })
        },
        findNews : function(callback){
            var sql = "select * from news";
            db.query(sql,"",function(rows){
                if(rows.length!=0){
                    callback(rows);
                }
            })
        }





        /**
         * Created by Administrator on 2017/3/7.
         */
        $(function(){
            checkRepeat();
            //在输入的时候判断空值
            $("input").on("keydown",function(){
                checkEmpty();
            });
            submit();
        });
        //异步判断用户名是否存在
        function checkRepeat(){
            $("input[name='username']").on("blur",function(){
                var username = {username:$(this).val()};
                var url = "checkRepeat";
                //ajax异步查询用户名是否重复
                $.get(url,username,function(data){
                    if(data.length!=0){
                        //重复则弹出警告框，并且将输入框变为警告的红色，自动聚焦
                        warning("该用户名已经被占用!");
                        $("input[name='username']").parent().parent().addClass("has-error");
                        $("input[name='username']").focus();
                    }else{
                        warningMis();
                        $("input[name='username']").parent().parent().removeClass("has-error");
                    }
                })
            })
        }
        //当有错误与信息存在的时候，不允许提交
        function submit(){
            $("button").on("click",function(e){
                $("input").trigger("keydown");
                var flag = $(".alert").attr("class");
                if(flag.lastIndexOf("invisible") == -1){
                    //假如在有警告信息的情况下，阻止提交
                    e.preventDefault();
                    //alert("请先修改有错误的内容再注册")
                }
            })
        }
        //判空
        function checkEmpty(){
            var username = $("input[name='username']").val();
            var password = $("input[name='password']").val();
            var rePassword = $("input[name='rePassword']").val();
            var question = $("input[name='question']").val();
            var answer = $("input[name='answer']").val();
            //只要有空的输入框没填，则弹出警告框
            if(username==""||password==""||rePassword==""||question==""||answer==""){
                warning("您有信息未填写!");
            }else{
                warningMis();
            }
        }
        //弹出警告信息的函数
        function warning(msg){
            $(".alert").text(msg);
            $(".alert").removeClass("invisible");
        }
        //警告信息消失的函数
        function warningMis(){
            $(".alert").addClass("invisible");
        }





         try{
                for(var key in req.body){
                    //先判断有没有空的信心没有填写，只要有没有填写的内容，则返回注册页面，并且弹出警告框
                    if(req.body[key].length == 0){
                        //抛出未填写异常
                        throw new Error("您有信息未填写!");
                    }else if(req.body.password != req.body.rePassword ){
                        //判断两次输入的密码是否一致
                        //抛出密码不一致异常
                        throw new Error("两次输入的密码不一致!");
                    }else{
                        //校验用户名是否存在
                        var sql = "select * from users where username = ?";
                        database.dataHandler(sql,req.body.username)
                            .then(function(value){
                                console.log(value);
                                if(value.length != 0){
                                    //用户名已存在则弹出警告框并且刷新页面
                                    req.flash('error','用户名已经被占用');
                                    res.redirect("toRegister");
                                }else{
                                    //完成注册
                                    var sql = "insert into users(username,password,question,answer) values (?,?,?,?)";
                                    database.dataHandler(sql,[user.username,user.password,user.question,user.answer])
                                        .then(function(value){
                                            //当插入行为1时则为注册成功
                                            if(value.affectedRows == 1){
                                                //注册成功之后跳转至登录页面
                                                res.redirect("toLogin");
                                            }
                                        })
                                    }
                                });
                            }
                        }
                }catch (e){
                    //抓取到异常则进行页面重定向，并且警告框
                    req.flash('error',e.message);
                    res.redirect("toRegister");
                }










                    try{
                        for(var key in user){
                            if(user[key] == ""){
                                throw new Error('您有信息未填写!');
                            }else if(user.password != user.rePassword){
                                throw new Error('两次输入的密码不一致!');
                            }else{
                                var sqlCheck = 'select * from users where username = ?';
                                var sqlRegister = "insert into users(username,password,question,answer,gender) values(?,?,?,?,?)";
                                database.dataHandler(sqlCheck,user.username)
                                    .then(function(value){
                                       try{
                                           if(value.length == 0){
                                               database.dataHandler(sqlRegister,[user.username,user.password,user.question,user.answer,user.gender])
                                                   .then(function(values){
                                                       if(values.affectedRows == 1){
                                                           res.redirect('toLogin');
                                                       }
                                                   })
                                           }else{
                                               throw new Error('该用户名已经被占用!');
                                           }
                                       }catch(e){
                                           req.flash('error',e.message);
                                           res.redirect('toRegister');
                                       }
                                    })
                            }
                        }
                    }catch (e){
                        req.flash('error',e.message);
                        res.redirect('toRegister');
                    }




                    /* GET home page. */
                    /*router.get('/index', function(req, res, next) {
                      var user = "";
                      var getNewsSql =  "select * from news";
                      /!*
                       Promise.all()是Promise对象的一个方法，他的参数是一个数组，数组的元素是希望执行的操作，在数组中的操作全部执行之后，才会调用.then方法。
                       利用Promise.all集中管理所有异步数据查询，等所有数据库操作执行完成之后按照操作的执行顺序将所有操作的查询结果依次放入数组
                       在完成之后  调用  .then 并且将查询结果传给.then 里面的回调函数
                       *!/
                      Promise.all([database.dataHandler(getNewsSql,"")])
                          .then(function(value){
                            //value是所有查询结果的数组集合
                            res.locals.ass = "";
                            res.locals.news = value[0];
                            res.render("index",{
                              title:"主页",
                              user:user
                            })
                          })
                    });
                    router.get('/index/:id/:page',function(req,res){
                        var user = req.session.user;
                        var getNewsSql =  "select * from news";
                        var getAssSql =  "select * from association_info where id in (select a_id from association_user_info where u_id = ?)";
                        var getAll = 'select * from association_info limit 0,6';
                      /!*
                       Promise.all()是Promise对象的一个方法，他的参数是一个数组，数组的元素是希望执行的操作，在数组中的操作全部执行之后，才会调用.then方法。
                       利用Promise.all集中管理所有异步数据查询，等所有数据库操作执行完成之后按照操作的执行顺序将所有操作的查询结果依次放入数组
                       在完成之后  调用  .then 并且将查询结果传给.then 里面的回调函数
                       *!/
                      Promise.all([database.dataHandler(getAssSql,user.id),database.dataHandler(getNewsSql,""),database.dataHandler(getAll,'')])
                          .then(function(value){
                            //value是所有查询结果的数组集合
                              res.locals.ass = value[0];
                              res.locals.news = value[1];
                              res.locals.asses = value[2];
                              res.render("index",{
                                title:"主页",
                                user: user
                                })
                            })
                    });*/